import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model,svm
from sklearn.metrics import mean_squared_error, r2_score
import mysql.connector
import datetime

# MySQL bağlantısı yapılır.
connection = mysql.connector.connect( host     = '****',
                                      port     = ****,
                                      user     = '****',
                                      password = '****',
                                      database = 'new_schema' )
                                     
# for döngüsüne girmeden önce başlangıç Metric Numarası atanır.
metric_no =110

# Grafik üzerine 6 adet tahmin yapılması için for döngüsü oluşturulur.
# Bu döngü sonucunda algoritmanın veri üzerine oluşturduğu pattern elde edilir.
for i in range(0,6):
  
  # Metric no:110 ile 119 arasındaki veriler işlenmek için for döngüsüne sokulur.
  for j in range(0,10):
    
    query = connection.cursor()
    
    # MetricValue ve MetricValueDate değerlerini elde etmek için MySQL kodu yazılır.
    x_view = 'SELECT MetricValueDate FROM new_schema.GraphView INNER JOIN new_schema.MetricDetail ON GraphView.MetricNo = MetricDetail.MetricNo AND GraphView.SubMetricNo = MetricDetail.SubMetricNo WHERE GraphView.idGraph =%s ORDER BY MetricValueDate;'%(metric_no)
    y_view = 'SELECT MetricValue FROM new_schema.GraphView INNER JOIN new_schema.MetricDetail ON GraphView.MetricNo = MetricDetail.MetricNo AND GraphView.SubMetricNo = MetricDetail.SubMetricNo WHERE GraphView.idGraph =%s ORDER BY MetricValueDate;'%(metric_no)
    
    # MetricValue Date verileri X, MetricValueDate değerleri y list'ine atanır.
    query.execute(x_view)
    X = query.fetchall()

    query.execute(y_view)
    y = query.fetchall()

    # Data'nın satır sayısı numrows değişkenine atanır.
    numrows = query.rowcount

    # X eksenini oşulturacak boş bir arr_X (numrows sayısı kadar satır,1 sütun) numpy array'i oluşturulur. 
    arr_X = np.array([datetime.timedelta(0, 1, 36000)])
    arr_X = np.zeros((numrows,1),dtype='datetime64[ns]')
    
    # Matematiksel işlem yapılabilmesi için for döngüsü ile list, numpy array'ine dönüştürülür.
    k = 0
    for l in range(0,numrows):
      arr_X[k] = X[l]
      k += 1
    
    # X verilerini train ve test verisi şeklinde ayırmak için boş bir arr_X1 (numrows sayısı kadar satır,1 sütun) numpy array'i oluşturulur.
    arr_X1 = np.zeros((numrows,1),dtype=int)
    
  
    for m in range(0,numrows):
      arr_X1[m]=m
  

   # Algoritmanın Train edileceği veri ve tahmin edilmek istenen test verileri belirtilir.
    arr_X1_train = np.array(arr_X1[:-7])
    arr_X1_test = np.array(arr_X1[-7:])

    # Y eksenini oşulturacak boş bir arr_y (numrows sayısı kadar satır,1 sütun) numpy array'i oluşturulur. 

    arr_y = np.zeros((numrows, 1),dtype='float64')
    
    #Matematiksel işlem yapılabilmesi için for döngüsü ile list, numpy array'ine dönüştürülür.
    n = 0
    for o in range(0, numrows):
      arr_y[n] = y[o]
      n += 1

    # Train ve test verileri ayrıştırılır.
    arr_y_train = np.array(arr_y[:-7])
    arr_y_test = np.array(arr_y[-7:])
    


    # Regülasyon Modeli seçilir.
    regr = svm.LinearSVC()

    # Regülasyon modeli ile Train data kullanılarak algoritma eğitilir.
    regr.fit(arr_X1_train, arr_y_train.ravel())

    # Test data kullanılarak tahmin yapılır.
    arr_y_pred = regr.predict(arr_X1_test)

    # Katsayılar
    print('Katsayılar: \n', regr.coef_)
    # Mean squared error
    print("Mean squared error: %.2f"
          % mean_squared_error(arr_y_test, arr_y_pred))
    # Variance score
    print('Variance score: %.2f' % r2_score(arr_y_test, arr_y_pred))

    # Grafik çizilir.
    plt.figure(metric_no)
    
    # Tüm data(Training + Test) kırmızı renkte çizdirilir
    plt.plot(arr_X1,y , label='Data', color='r', linewidth=7)
    
    # Test data'sı siyah renkte çizilir.
    plt.plot(arr_X1_test, arr_y_test, label='Test',  color='black' ,linewidth=2)
    
    # Algoritmanın tahmini mavi renkte çizdirilir.
    plt.plot(arr_X1_test, arr_y_pred, label='Prediction', color='blue', linewidth=3)
    
    plt.xlabel('Hafta')
    
    plt.title(metric_no)

    plt.legend()
    plt.show()
    
    metric_no +=1
  
  # Döngünün 119'dan 110 a dönmesi için atama yapılır.  
  metric_no =110
  
  
  
# for döngüsüne girmeden önce başlangıç Metric Numarası atanır.
metric_no =211

# Grafik üzerine 6 adet tahmin yapılması için for döngüsü oluşturulur.
for i in range(0,6):
  
  # Metric no:211 ile 220 arasındaki veriler işlenmek için for döngüsüne sokulur.
  for j in range(0,10):
    query = connection.cursor()
    
     # MetricValue ve MetricValueDate değerlerini elde etmek için MySQL kodu yazılır.
    x_view = 'SELECT MetricValueDate FROM new_schema.GraphView INNER JOIN new_schema.MetricDetail ON GraphView.MetricNo = MetricDetail.MetricNo AND GraphView.SubMetricNo = MetricDetail.SubMetricNo WHERE GraphView.idGraph =%s ORDER BY MetricValueDate;'%(metric_no)
    y_view = 'SELECT MetricValue FROM new_schema.GraphView INNER JOIN new_schema.MetricDetail ON GraphView.MetricNo = MetricDetail.MetricNo AND GraphView.SubMetricNo = MetricDetail.SubMetricNo WHERE GraphView.idGraph =%s ORDER BY MetricValueDate;'%(metric_no)
    
    # MetricValue Date verileri X, MetricValueDate değerleri y list'ine atanır.
    query.execute(x_view)
    X = query.fetchall()

    query.execute(y_view)
    y = query.fetchall()
    
    # Data'nın satır sayısı numrows değişkenine atanır.
    numrows = query.rowcount

    # X eksenini oşulturacak boş bir arr_X (numrows sayısı kadar satır,1 sütun) numpy array'i oluşturulur.
    arr_X = np.array([datetime.timedelta(0, 1, 36000)])
    arr_X = np.zeros((numrows,1),dtype='datetime64[ns]')

    # Matematiksel işlem yapılabilmesi için for döngüsü ile list, numpy array'ine dönüştürülür.
    k = 0
    for l in range(0,numrows):
      arr_X[k] = X[l]
      k += 1
    
    # X verilerini train ve test verisi şeklinde ayırmak için boş bir arr_X1 (numrows sayısı kadar satır,1 sütun) numpy array'i oluşturulur.
    arr_X1 = np.zeros((numrows,1),dtype=int)
    for m in range(0,numrows):
      arr_X1[m]=m
  

    # Algoritmanın Train edileceği veri ve tahmin edilmek istenen test verileri belirtilir.
    arr_X1_train = np.array(arr_X1[:-7])
    arr_X1_test = np.array(arr_X1[-7:])

    # Y eksenini oşulturacak boş bir arr_y (numrows sayısı kadar satır,1 sütun) numpy array'i oluşturulur.
    arr_y = np.zeros((numrows, 1),dtype='float64')
   
    #Matematiksel işlem yapılabilmesi için for döngüsü ile list, numpy array'ine dönüştürülür
    n = 0
    for o in range(0, numrows):
      arr_y[n] = y[o]
      n += 1

    # Train ve test verileri ayrıştırılır
    arr_y_train = np.array(arr_y[:-7])
    arr_y_test = np.array(arr_y[-7:])
    


    # Regülasyon Modeli seçilir.
    regr = svm.LinearSVC()

    # Regülasyon modeli ile Train data kullanılarak algoritma eğitilir.
    regr.fit(arr_X1_train, arr_y_train.ravel())

    # Test data kullanılarak tahmin yapılır.
    arr_y_pred = regr.predict(arr_X1_test)

    # Katsayılar
    print('Katsayılar: \n', regr.coef_)
    # Mean squared error
    print("Mean squared error: %.2f"
          % mean_squared_error(arr_y_test, arr_y_pred))
    # Variance score
    print('Variance score: %.2f' % r2_score(arr_y_test, arr_y_pred))

    # Grafik çizilir.
    plt.figure(metric_no)
    
    # Tüm data(Training + Test) kırmızı renkte çizdirilir
    plt.plot(arr_X1,y , label='Data', color='r', linewidth=7)
    
    # Test data'sı siyah renkte çizilir.
    plt.plot(arr_X1_test, arr_y_test, label='Test',  color='black' ,linewidth=2)
    
    # Algoritmanın tahmini mavi renkte çizdirilir.
    plt.plot(arr_X1_test, arr_y_pred, label='Prediction', color='blue', linewidth=3)
    
    plt.xlabel('Hafta')
    
    plt.title(metric_no)

    plt.legend()
    plt.show()
    
    metric_no +=1
  
  # Döngünün 211'den 220'ye dönmesi için atama yapılır.  
  metric_no =211

connection.close()
